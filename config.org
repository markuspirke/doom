#+title: My personal emacs configuration.
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el

* Theme
We use the package circadian to change between a light and dark theme.
#+begin_src emacs-lisp :tangle yes
(use-package circadian
  :ensure t
  :config
  (setq circadian-themes '(("6:00" . doom-feather-light)
                           ("15:00" . doom-palenight)))
  (circadian-setup))
#+end_src
* UI
** Line numbers
#+begin_src emacs-lisp :tangle yes
;; Linenumber
(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative) ;; This sets relative line numbers.

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                org-agenda-mode-hook
                pdf-view-mode-hook ;; otherwise conflicts
                shell-mode-hook
                vterm-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))

;;
#+end_src
** Remove tilde on empty lines
#+begin_src emacs-lisp :tangle yes
(remove-hook 'org-mode-hook #'vi-tilde-fringe-mode)
#+end_src
** Tree-sitter
#+begin_src emacs-lisp :tangle yes
;; (use-package treesit-auto
;;   :config
;;   (treesit-auto-add-to-auto-mode-alist 'all))
#+end_src
** No titlebar
#+begin_src emacs-lisp :tangle yes
;; No titlebar
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src
** Transparency
#+begin_src emacs-lisp :tangle yes
(doom/set-frame-opacity 90) ;; Sets the transparency to 90% at start of doom.
;; (setq doom/set-frame-opacity 90)
#+end_src
** Icons
#+begin_src emacs-lisp :tangle yes
(use-package nerd-icons
  :ensure t)
#+end_src
* Keybindings
Not like this! This will destroy movement in fuzzy search.
#+begin_src emacs-lisp :tangle yes
;; (bind-key* "C-j" #'evil-window-down)
;; (bind-key* "C-k" #'evil-window-up)
;; (bind-key* "C-h" #'evil-window-left)
;; (bind-key* "C-l" #'evil-window-right)
#+end_src
* Org mode
** General things
#+begin_src emacs-lisp :tangle yes
(use-package org
        :config
        (setq org-agenda-start-with-log-mode t)
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)
        (setq org-directory "~/Org/") ;; last / was necessary
        (setq org-agenda-files '("todos.org"))
        (setq org-agenda-hide-tags-regexp ".*")
        (setq org-agenda-span 7)
        (setq org-agenda-start-day "+0d")
        (setq org-agenda-time-grid '((daily) () "" ""))
        (setq org-todo-keywords
        '((sequence "TODO(t)" "READ(r)" "|" "DONE(d)")))
)

(custom-set-faces!
  `(outline-1 :height 1.3 :foreground ,(nth 1 (nth 14 doom-themes--colors)))
  `(outline-2 :height 1.25 :foreground ,(nth 1 (nth 15 doom-themes--colors)))
  `(outline-3 :height 1.2 :foreground ,(nth 1 (nth 19 doom-themes--colors)))
  `(outline-4 :height 1.1 :foreground ,(nth 1 (nth 23 doom-themes--colors)))
  `(outline-5 :height 1.1 :foreground ,(nth 1 (nth 24 doom-themes--colors)))
  `(outline-6 :height 1.1 :foreground ,(nth 1 (nth 16 doom-themes--colors)))
  `(outline-7 :height 1.05 :foreground ,(nth 1 (nth 18 doom-themes--colors)))
  `(outline-8 :height 1.05 :foreground ,(nth 1 (nth 11 doom-themes--colors)))
  )

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t
 org-modern-fold-stars '(("◉" . "◉") ("○" . "○") ("●" . "●") ("○" . "○"))

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "◀── now ─────────────────────────────────────────────────")

;; Ellipsis styling
(setq org-ellipsis " ▾") ;; symbol if header is closed
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
(with-eval-after-load 'org (global-org-modern-mode))

#+end_src
** Org-Agenda
#+begin_src emacs-lisp :tangle yes
(defun mp/org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  (olivetti-mode))

(add-hook 'org-agenda-mode-hook 'mp/org-agenda-open-hook)

;; Custom styles for dates in agenda
(custom-set-faces!
  '(org-agenda-date :inherit outline-1 :height 1.01)
  '(org-agenda-date-today :inherit outline-2 :height 1.01)
  '(org-agenda-date-weekend :inherit outline-1 :height 1.01)
  '(org-agenda-date-weekend-today :inherit outline-2 :height 1.01)
  '(org-super-agenda-header :inherit custom-button :weight bold :height 1.01)
  `(link :foreground unspecified :underline nil :background ,(nth 1 (nth 7 doom-themes--colors)))
  '(org-link :foreground unspecified))

;; this determines what is shown in the agenda
(setq org-agenda-prefix-format '(
  (agenda . " %?-2i %t ")
  (todo . " %i %-12:c")
  (tags . " %i %-12:c")
  (search . " %i %-12:c")))

;; different emojis for different categories of todos
(setq org-agenda-category-icon-alist
      '(("work" (nerd-icons-faicon "" :height 0.8 :v-adjust 0) nil nil :ascent center)
        ("teaching" (nerd-icons-faicon "" :height 0.8 :v-adjust 0) nil nil :ascent center)
        ("home" (nerd-icons-mdicon "󰏚󰠧" :height 0.8 :v-adjust 0) nil nil :ascent center)
        ("privat" (nerd-icons-mdicon "󰏚" :height 0.8 :v-adjust 0) nil nil :ascent center)
        ))
#+end_src
** Org Super Agenda
Org Super Agenda organizes contents in the agenda view more nicely. Maybe this could be improved in the future.
#+begin_src emacs-lisp :tangle yes
(require 'org-super-agenda)
(setq org-super-agenda-groups
      '(
        (:name " Today "
               :time-grid t
               :date today
               :scheduled today
               :order 1
               :face 'warning)
        (:name "! Overdue "
               :scheduled past
               :date today
               :order 1
               ;; :not (:log closed)
               ;; :discard (:todo "DONE")
               :face 'error)
        (:name "Teaching "
               :and(:category "teaching")
               :order 3)
        (:name "Haus "
               :and(:category "home")
               :order 3)
        (:name "Privat "
               :and(:category "private")
               :order 3)
        (:name "Arbeit"
               :and(:category "work")
               :order 3)
        ))

(org-super-agenda-mode t)

(map! :desc "Next Line"
      :map org-super-agenda-header-map
      "j" 'org-agenda-next-line)

(map! :desc "Next Line"
      :map org-super-agenda-header-map
      "k" 'org-agenda-previous-line)
#+end_src
** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle yes
(defun mp/tangle-on-save-org-mode-file()
  (when (string= (message "%s" major-mode) "org-mode")
    (org-babel-tangle)))

(add-hook 'after-save-hook 'mp/tangle-on-save-org-mode-file)
#+end_src
** Org-Download
#+begin_src emacs-lisp
(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** Nice Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.
#+begin_src emacs-lisp :tangle yes

  ;; (use-package org-bullets
  ;;   :hook (org-mode . org-bullets-mode)
  ;;   :custom
  ;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
** Org Roam
We want to use this package as our note taking system.
*** Directory
Org roam directory will be located in the Zettelkasten directory.
#+begin_src emacs-lisp :tangle yes
(setq org-roam-directory "~/Zettelkasten")
#+end_src
*** To fix :title :title bug
#+begin_src emacs-lisp :tangle yes
(set-file-template! 'org-mode :ignore t) ;; works
#+end_src
*** UI
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-ui
  :after org-roam
  )
#+end_src
*** The concept
We have two different kinds of notes. *Fleeting notes* and *permanent notes*.
** Org Journal
This sets the path to the directory where to journal notes are located.
#+begin_src emacs-lisp :tangle yes
(setq org-journal-dir "~/Tagebuch")
#+end_src
** Center Buffers
This centers org mode buffers. Looks nicer if the org buffer takes up the whole screen.
#+begin_src emacs-lisp :tangle yes

  (defun mp/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mp/org-mode-visual-fill))

#+end_src
* Spelling
** Jinx-correct
This seems to be a great package for finding spelling mistakes. Some conflicts with flyspell-mode.
One needs to install a two external dependencies.
#+begin_src bash
homebrew install enchant
homebrew install pkgconf
#+end_src
The latter one had conflicts on my system, as I already had installed something similar called /pkg-config/. But it worked nonetheless.
#+begin_src emacs-lisp :tangle yes
(use-package jinx
  :ensure t
  :hook ((LaTeX-mode . jinx-mode)
         (latex-mode . jinx-mode)
         (org-mode . jinx-mode)
         (text-mode . jinx-mode)))
;; this turns of the flyspell-mode when an org document is opened
(remove-hook 'org-mode-hook #'flyspell-mode)
#+end_src
